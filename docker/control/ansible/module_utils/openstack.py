#!/usr/bin/env python

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'community'
}

DOCUMENTATION = '''
'''

from ansible.module_utils.basic import AnsibleModule
from ansible.errors import AnsibleOptionError

try:
    from ansible.module_utils import ost
except:
    from module_utils import ost

NEUTRON = 'neutron'
OS_SDK = 'openstacksdk'


class OstClientModule(AnsibleModule):
    """
    Run command from specified Openstack client
    """

    clients = [NEUTRON, OS_SDK]

    def __init__(self, debug=False):
        self._client__init__(self, debug=False)
        module_args = ost.default_args()

        module_args.update(dict(client=dict(type='str',
                                            choices=clients,
                                            required=True),
                                method=dict(type='str',
                                            required=True),
                                args=dict(type='list', required=False),
                                kwargs=dict(type='dictionary', required=True)))

        super(NeutronModule, self).__init__(
            argument_spec=module_args,
            supports_check_mode=True
        )

        client = self.params['client']
        method = self.params['method']
        args = self.params['args']
        kwargs = self.paramgs['kwargs']

        session = ost.get_session(self.params)

        if client is OS_SDK:
            pass

        if client is NEUTRON:
            import neutronclient.v2_0.client as neutron_client
            self._client = neutron_client.Client(session=session,
                                                 endpoint_type=self.params['interface'],
                                                 region_name=self.params['region_name'])
        try:
            result = self._call_method(method, args, kwargs)
            self._succeed(result)
        except Exception as e:
            self._fail(e)

    def _call_method(self, method_name, *args, **kwargs):
        if method_name not in client_methods[client_name]:
            raise AnsibleOptionError(message="method not found")
        return getattr(self, method_name)(*args, **kwargs)

    def _fail(self, e):
        self.fail_json(msg=e.message)

    def _succeed(self):
        self.exit_json(msg="Success", result=result)


def main():
    OstClientModule()


if __name__ == '__main__':
    main()


client_methods = dict()
client_methods[OS_SDK] = []
client_methods[NEUTRON]=[
    'add_bgp_speaker_to_dragent',
    'add_gateway_router',
    'add_interface_router',
    'add_network_to_bgp_speaker',
    'add_network_to_dhcp_agent',
    'add_peer_to_bgp_speaker',
    'add_router_to_l3_agent',
    'add_tag',
    'associate_flavor',
    'associate_health_monitor',
    'connect_network_gateway',
    'create_address_scope',
    'create_bandwidth_limit_rule',
    'create_bgp_peer',
    'create_bgp_speaker',
    'create_bgpvpn',
    'create_bgpvpn_network_assoc',
    'create_bgpvpn_port_assoc',
    'create_bgpvpn_router_assoc',
    'create_dscp_marking_rule',
    'create_endpoint_group',
    'create_ext',
    'create_firewall',
    'create_firewall_policy',
    'create_firewall_rule',
    'create_flavor',
    'create_floatingip',
    'create_fwaas_firewall_group',
    'create_fwaas_firewall_policy',
    'create_fwaas_firewall_rule',
    'create_gateway_device',
    'create_health_monitor',
    'create_ikepolicy',
    'create_ipsec_site_connection',
    'create_ipsecpolicy',
    'create_lbaas_healthmonitor',
    'create_lbaas_l7policy',
    'create_lbaas_l7rule',
    'create_lbaas_member',
    'create_lbaas_pool',
    'create_listener',
    'create_loadbalancer',
    'create_member',
    'create_metering_label',
    'create_metering_label_rule',
    'create_minimum_bandwidth_rule',
    'create_network',
    'create_network_gateway',
    'create_network_log',
    'create_pool',
    'create_port',
    'create_qos_policy',
    'create_qos_queue',
    'create_rbac_policy',
    'create_router',
    'create_security_group',
    'create_security_group_rule',
    'create_service_profile',
    'create_sfc_flow_classifier',
    'create_sfc_port_chain',
    'create_sfc_port_pair',
    'create_sfc_port_pair_group',
    'create_sfc_service_graph',
    'create_subnet',
    'create_subnetpool',
    'create_trunk',
    'create_vip',
    'create_vpnservice',
    'delete',
    'delete_address_scope',
    'delete_agent',
    'delete_auto_allocated_topology',
    'delete_bandwidth_limit_rule',
    'delete_bgp_peer',
    'delete_bgp_speaker',
    'delete_bgpvpn',
    'delete_bgpvpn_network_assoc',
    'delete_bgpvpn_port_assoc',
    'delete_bgpvpn_router_assoc',
    'delete_dscp_marking_rule',
    'delete_endpoint_group',
    'delete_ext',
    'delete_firewall',
    'delete_firewall_policy',
    'delete_firewall_rule',
    'delete_flavor',
    'delete_floatingip',
    'delete_fwaas_firewall_group',
    'delete_fwaas_firewall_policy',
    'delete_fwaas_firewall_rule',
    'delete_gateway_device',
    'delete_health_monitor',
    'delete_ikepolicy',
    'delete_ipsec_site_connection',
    'delete_ipsecpolicy',
    'delete_lbaas_healthmonitor',
    'delete_lbaas_l7policy',
    'delete_lbaas_l7rule',
    'delete_lbaas_member',
    'delete_lbaas_pool',
    'delete_listener',
    'delete_loadbalancer',
    'delete_member',
    'delete_metering_label',
    'delete_metering_label_rule',
    'delete_minimum_bandwidth_rule',
    'delete_network',
    'delete_network_gateway',
    'delete_network_log',
    'delete_pool',
    'delete_port',
    'delete_qos_policy',
    'delete_qos_queue',
    'delete_quota',
    'delete_rbac_policy',
    'delete_router',
    'delete_security_group',
    'delete_security_group_rule',
    'delete_service_profile',
    'delete_sfc_flow_classifier',
    'delete_sfc_port_chain',
    'delete_sfc_port_pair',
    'delete_sfc_port_pair_group',
    'delete_sfc_service_graph',
    'delete_subnet',
    'delete_subnetpool',
    'delete_trunk',
    'delete_vip',
    'delete_vpnservice',
    'deserialize',
    'disassociate_flavor',
    'disassociate_health_monitor',
    'disconnect_network_gateway',
    'do_request',
    'exception_handler_v20',
    'extend_create',
    'extend_delete',
    'extend_list',
    'extend_show',
    'extend_update',
    'find_resource',
    'find_resource_by_id',
    'firewall_policy_insert_rule',
    'firewall_policy_remove_rule',
    'get',
    'get_auth_info',
    'get_auto_allocated_topology',
    'get_lbaas_agent_hosting_loadbalancer',
    'get_lbaas_agent_hosting_pool',
    'get_quotas_tenant',
    'get_resource_plural',
    'insert_rule_fwaas_firewall_policy',
    'list',
    'list_address_scopes',
    'list_agents',
    'list_availability_zones',
    'list_bandwidth_limit_rules',
    'list_bgp_peers',
    'list_bgp_speaker_on_dragent',
    'list_bgp_speakers',
    'list_bgpvpn_network_assocs',
    'list_bgpvpn_port_assocs',
    'list_bgpvpn_router_assocs',
    'list_bgpvpns',
    'list_dhcp_agent_hosting_networks',
    'list_dragents_hosting_bgp_speaker',
    'list_dscp_marking_rules',
    'list_endpoint_groups',
    'list_ext',
    'list_extensions',
    'list_firewall_policies',
    'list_firewall_rules',
    'list_firewalls',
    'list_flavors',
    'list_floatingips',
    'list_fwaas_firewall_groups',
    'list_fwaas_firewall_policies',
    'list_fwaas_firewall_rules',
    'list_gateway_devices',
    'list_health_monitors',
    'list_ikepolicies',
    'list_ipsec_site_connections',
    'list_ipsecpolicies',
    'list_l3_agent_hosting_routers',
    'list_lbaas_healthmonitors',
    'list_lbaas_l7policies',
    'list_lbaas_l7rules',
    'list_lbaas_loadbalancers',
    'list_lbaas_members',
    'list_lbaas_pools',
    'list_listeners',
    'list_loadbalancers',
    'list_loadbalancers_on_lbaas_agent',
    'list_members',
    'list_metering_label_rules',
    'list_metering_labels',
    'list_minimum_bandwidth_rules',
    'list_network_gateways',
    'list_network_ip_availabilities',
    'list_network_loggable_resources',
    'list_network_logs',
    'list_networks',
    'list_networks_on_dhcp_agent',
    'list_pools',
    'list_pools_on_lbaas_agent',
    'list_ports',
    'list_qos_policies',
    'list_qos_queues',
    'list_qos_rule_types',
    'list_quotas',
    'list_rbac_policies',
    'list_route_advertised_from_bgp_speaker',
    'list_routers',
    'list_routers_on_l3_agent',
    'list_security_group_rules',
    'list_security_groups',
    'list_service_profiles',
    'list_service_providers',
    'list_sfc_flow_classifiers',
    'list_sfc_port_chains',
    'list_sfc_port_pair_groups',
    'list_sfc_port_pairs',
    'list_sfc_service_graphs',
    'list_subnetpools',
    'list_subnets',
    'list_trunks',
    'list_vips',
    'list_vpnservices',
    'next',
    'post',
    'put',
    'remove_bgp_speaker_from_dragent',
    'remove_gateway_router',
    'remove_interface_router',
    'remove_network_from_bgp_speaker',
    'remove_network_from_dhcp_agent',
    'remove_peer_from_bgp_speaker',
    'remove_router_from_l3_agent',
    'remove_rule_fwaas_firewall_policy',
    'remove_tag',
    'remove_tag_all',
    'replace_tag',
    'request_ids',
    'retrieve_loadbalancer_stats',
    'retrieve_loadbalancer_status',
    'retrieve_pool_stats',
    'retry_request',
    'serialize',
    'show_address_scope',
    'show_agent',
    'show_bandwidth_limit_rule',
    'show_bgp_peer',
    'show_bgp_speaker',
    'show_bgpvpn',
    'show_bgpvpn_network_assoc',
    'show_bgpvpn_port_assoc',
    'show_bgpvpn_router_assoc',
    'show_dscp_marking_rule',
    'show_endpoint_group',
    'show_ext',
    'show_extension',
    'show_firewall',
    'show_firewall_policy',
    'show_firewall_rule',
    'show_flavor',
    'show_floatingip',
    'show_fwaas_firewall_group',
    'show_fwaas_firewall_policy',
    'show_fwaas_firewall_rule',
    'show_gateway_device',
    'show_health_monitor',
    'show_ikepolicy',
    'show_ipsec_site_connection',
    'show_ipsecpolicy',
    'show_lbaas_healthmonitor',
    'show_lbaas_l7policy',
    'show_lbaas_l7rule',
    'show_lbaas_member',
    'show_lbaas_pool',
    'show_listener',
    'show_loadbalancer',
    'show_member',
    'show_metering_label',
    'show_metering_label_rule',
    'show_minimum_bandwidth_rule',
    'show_network',
    'show_network_gateway',
    'show_network_ip_availability',
    'show_network_log',
    'show_pool',
    'show_port',
    'show_qos_policy',
    'show_qos_queue',
    'show_quota',
    'show_quota_default',
    'show_rbac_policy',
    'show_router',
    'show_security_group',
    'show_security_group_rule',
    'show_service_profile',
    'show_sfc_flow_classifier',
    'show_sfc_port_chain',
    'show_sfc_port_pair',
    'show_sfc_port_pair_group',
    'show_sfc_service_graph',
    'show_subnet',
    'show_subnetpool',
    'show_trunk',
    'show_vip',
    'show_vpnservice',
    'trunk_add_subports',
    'trunk_get_subports',
    'trunk_remove_subports',
    'update_address_scope',
    'update_agent',
    'update_bandwidth_limit_rule',
    'update_bgp_peer',
    'update_bgp_speaker',
    'update_bgpvpn',
    'update_bgpvpn_network_assoc',
    'update_bgpvpn_port_assoc',
    'update_bgpvpn_router_assoc',
    'update_dscp_marking_rule',
    'update_endpoint_group',
    'update_ext',
    'update_firewall',
    'update_firewall_policy',
    'update_firewall_rule',
    'update_flavor',
    'update_floatingip',
    'update_fwaas_firewall_group',
    'update_fwaas_firewall_policy',
    'update_fwaas_firewall_rule',
    'update_gateway_device',
    'update_health_monitor',
    'update_ikepolicy',
    'update_ipsec_site_connection',
    'update_ipsecpolicy',
    'update_lbaas_healthmonitor',
    'update_lbaas_l7policy',
    'update_lbaas_l7rule',
    'update_lbaas_member',
    'update_lbaas_pool',
    'update_listener',
    'update_loadbalancer',
    'update_member',
    'update_minimum_bandwidth_rule',
    'update_network',
    'update_network_gateway',
    'update_network_log',
    'update_pool',
    'update_port',
    'update_qos_policy',
    'update_quota',
    'update_rbac_policy',
    'update_router',
    'update_security_group',
    'update_service_profile',
    'update_sfc_flow_classifier',
    'update_sfc_port_chain',
    'update_sfc_port_pair',
    'update_sfc_port_pair_group',
    'update_sfc_service_graph',
    'update_subnet',
    'update_subnetpool',
    'update_trunk',
    'update_vip',
    'update_vpnservice',
    'validate_auto_allocated_topology_requirements',
]
